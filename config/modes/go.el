(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-env "GOPATH")
  (exec-path-from-shell-copy-env "RUST_SRC_PATH"))

(defun go-mode-setup ()
  (setq compile-command "go build -v && go test -v ./...")
  (define-key (current-local-map) "\C-c\C-c" 'compile)
  (go-eldoc-setup)
 (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
  (local-set-key (kbd "M-.") 'godef-jump)
  (set (make-local-variable 'company-backends) '(company-go))
  (company-mode)
  (defun append-path (a &rest arg-list)
    (dolist (b arg-list)
      (setq a (concat (file-name-as-directory a) b)))
    a)
  (setq path (file-name-directory buffer-file-name))
  ; goautoenv
  (while path
    (setq tmp_path (append-path path ".goenv" "bin" "activate"))
    (if (file-exists-p tmp_path)
        (progn
          (make-local-variable 'goautoenv)
          (setq goautoenv
                (with-temp-buffer
                  (insert-file-contents tmp_path)
                  (substring (buffer-string)
                             (+ 7 (string-match "^GOPATH=.+$" (buffer-string)))
                             (match-end 0))))
          (add-function :before (symbol-function 'company-go--invoke-autocomplete) #'goautoenv-invoke-autocomplete)
          (setq path nil))
      (setq path (file-name-directory (directory-file-name path))))
    ))
(add-hook 'go-mode-hook 'go-mode-setup)

(defun goautoenv-invoke-autocomplete ()
  (setenv "GOPATH" goautoenv)
  )
